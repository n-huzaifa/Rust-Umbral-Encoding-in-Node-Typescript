/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_random(): number;
export function secretkey_toBEBytes(a: number, b: number): void;
export function secretkey_fromBEBytes(a: number, b: number, c: number): void;
export function secretkey_publicKey(a: number): number;
export function secretkey_toString(a: number, b: number): void;
export function __wbg_secretkeyfactory_free(a: number): void;
export function secretkeyfactory_random(): number;
export function secretkeyfactory_fromSecureRandomness(a: number, b: number, c: number): void;
export function secretkeyfactory_makeSecret(a: number, b: number, c: number, d: number): void;
export function secretkeyfactory_makeKey(a: number, b: number, c: number): number;
export function secretkeyfactory_makeFactory(a: number, b: number, c: number): number;
export function secretkeyfactory_toString(a: number, b: number): void;
export function publickey___getClassname(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_toCompressedBytes(a: number, b: number): void;
export function publickey_fromCompressedBytes(a: number, b: number, c: number): void;
export function publickey_recoverFromPrehash(a: number, b: number, c: number, d: number): void;
export function publickey_toString(a: number, b: number): void;
export function publickey_equals(a: number, b: number): number;
export function __wbg_signer_free(a: number): void;
export function signer_new(a: number): number;
export function signer_sign(a: number, b: number, c: number): number;
export function signer_verifyingKey(a: number): number;
export function signer_toString(a: number, b: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_verify(a: number, b: number, c: number, d: number): number;
export function signature_toDerBytes(a: number, b: number): void;
export function signature_fromDerBytes(a: number, b: number, c: number): void;
export function signature_toBEBytes(a: number, b: number): void;
export function signature_fromBEBytes(a: number, b: number, c: number): void;
export function signature_toString(a: number, b: number): void;
export function signature_equals(a: number, b: number): number;
export function __wbg_recoverablesignature_free(a: number): void;
export function recoverablesignature_toBEBytes(a: number, b: number): void;
export function recoverablesignature_fromBEBytes(a: number, b: number, c: number): void;
export function recoverablesignature_toString(a: number, b: number): void;
export function recoverablesignature_equals(a: number, b: number): number;
export function capsule___getClassname(a: number, b: number): void;
export function __wbg_capsule_free(a: number): void;
export function capsule_toBytes(a: number, b: number): void;
export function capsule_toBytesSimple(a: number, b: number): void;
export function capsule_fromBytes(a: number, b: number, c: number): void;
export function capsule_toString(a: number, b: number): void;
export function capsule_equals(a: number, b: number): number;
export function __wbg_capsulefrag_free(a: number): void;
export function capsulefrag_verify(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function capsulefrag_toBytes(a: number, b: number): void;
export function capsulefrag_toBytesSimple(a: number, b: number): void;
export function capsulefrag_fromBytes(a: number, b: number, c: number): void;
export function capsulefrag_toString(a: number, b: number): void;
export function capsulefrag_skipVerification(a: number): number;
export function capsulefrag_equals(a: number, b: number): number;
export function verifiedcapsulefrag___getClassname(a: number, b: number): void;
export function verifiedcapsulefrag_toBytes(a: number, b: number): void;
export function verifiedcapsulefrag_toString(a: number, b: number): void;
export function encrypt(a: number, b: number, c: number, d: number): void;
export function decryptOriginal(a: number, b: number, c: number, d: number, e: number): void;
export function decryptReencrypted(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_keyfrag_free(a: number): void;
export function keyfrag_verify(a: number, b: number, c: number, d: number, e: number): void;
export function keyfrag_toBytes(a: number, b: number): void;
export function keyfrag_fromBytes(a: number, b: number, c: number): void;
export function keyfrag_toString(a: number, b: number): void;
export function keyfrag_skipVerification(a: number): number;
export function keyfrag_equals(a: number, b: number): number;
export function verifiedkeyfrag___getClassname(a: number, b: number): void;
export function verifiedkeyfrag_toBytes(a: number, b: number): void;
export function verifiedkeyfrag_toString(a: number, b: number): void;
export function generateKFrags(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function reencrypt(a: number, b: number): number;
export function __wbg_curvepoint_free(a: number): void;
export function curvepoint_coordinates(a: number): number;
export function parameters_new(): number;
export function parameters_u(a: number): number;
export function __wbg_reencryptionevidence_free(a: number): void;
export function reencryptionevidence_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function reencryptionevidence_toBytes(a: number, b: number): void;
export function reencryptionevidence_fromBytes(a: number, b: number, c: number): void;
export function reencryptionevidence_e(a: number): number;
export function reencryptionevidence_ez(a: number): number;
export function reencryptionevidence_e1(a: number): number;
export function reencryptionevidence_e1h(a: number): number;
export function reencryptionevidence_e2(a: number): number;
export function reencryptionevidence_v(a: number): number;
export function reencryptionevidence_vz(a: number): number;
export function reencryptionevidence_v1(a: number): number;
export function reencryptionevidence_v1h(a: number): number;
export function reencryptionevidence_v2(a: number): number;
export function reencryptionevidence_uz(a: number): number;
export function reencryptionevidence_u1(a: number): number;
export function reencryptionevidence_u1h(a: number): number;
export function reencryptionevidence_u2(a: number): number;
export function reencryptionevidence_kfragValidityMessageHash(a: number): number;
export function reencryptionevidence_kfragSignatureV(a: number): number;
export function verifiedcapsulefrag_equals(a: number, b: number): number;
export function verifiedkeyfrag_equals(a: number, b: number): number;
export function verifiedcapsulefrag_unverify(a: number): number;
export function verifiedcapsulefrag_toBytesSimple(a: number, b: number): void;
export function __wbg_verifiedcapsulefrag_free(a: number): void;
export function __wbg_verifiedkeyfrag_free(a: number): void;
export function __wbg_parameters_free(a: number): void;
export function secretkeyfactory_seedSize(): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
